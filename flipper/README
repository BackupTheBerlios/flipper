This is the README of flipper.

Flipper is a program that does randomised local search for
satisfiability of 3 variable sentences on prenex normal form
in the pure predicate calculus. It does so by proving satisfiability
relative to given theories.

Flipper will terminate successfully only if the input is satisfiable.
If the imput is not found to be satisfiable
it will keep on running, usually/always till resources
are exhausted.

Provided that the random generator is on your side, flipper will terminate
successfully if the input is satisfiable over some finite structure.
Besides there are some inputs not satisfiable
by any finite structure for which flipper terminates.

The intended use of flipper is as a complement to theorem provers
and finite model generators in deciding the satisfiability of
given sentences.


REQUIREMENTS

an operating system somewhat like linux

head
bash
make
gcc
gnu-prolog


INSTALATION

edit Makefile # especially the BIN_DIRECTORY variable
make
make install


RUNNING

flipper file.fo
%to translate .fo files to the TPTP format do;
fo2tptp < file.fo

where file.fo is a file whose content is of the following form;

Sentence.

here Sentence is specified as follows;

(Sentence & Sentence) - conjunction
aaa(Matrix)         - for all x y z (Matrix)
aae(Matrix)         - for all x y there exists z (Matrix)
aea(Matrix)         - for all x there exists y for all z (Matrix)
aee(Matrix)         - for all x there exist x y (Matrix)
eaa(Matrix)
eae(Matrix)
eea(Matrix)
eee(Matrix)

here Matrix has the following form;

(Matrix & Matrix) - conjunction
(Matrix v Matrix) - disjunction
(Matrix => Matrix) - implication
-(Matrix)          - negation
Relation(x)
Relation(y)
Relation(z)
Relation(xx)
Relation(xy)
Relation(xz)
Relation(yx)
Relation(yy)
Relation(yz)
Relation(zx)
Relation(zy)
Relation(zz)

where Relation denotes any sequence of 
letters the first of which is lower case.

Note that flipper does not recognize equality or function-sybols,
these have to be defined as in the examples below.


EXAMPLES

Here are some examples of formulae that don't have finite models.
The symbol % means that the rest of the line is a comment.

example 1; an irreflexive transitive unbounded relation 

aaa(-lth(xx)) &
aae( lth(xz)) &
aaa((lth(xy) & lth(yz)) => lth(xz)).


example 2; an injective endo-function whose image is not entire

aaa(eq(xx)) &
aaa(eq(xy) => eq(yx)) &
aaa((eq(xy) & eq(yz)) => eq(xz)) &
aaa((f(xy) & eq(xz)) => f(zy)) & 	   	%substitution
aaa((f(xy) & eq(yz)) => f(xz)) & 	       	%substitution
aae(f(xz)) &                        		%f is total
aaa((f(xy) & f(xz)) => eq(yz)) & 		%f is a function
aaa((f(xy) & f(zy)) => eq(xz)) & 		%f is injective
aea(-f(zy)). 	       		    		%f's image is not total


example 3; the same as the example above except relativized to a
predicate dom

aaa(eq(xx)) &
aaa(eq(xy) => eq(yx)) &
aaa((eq(xy) & eq(yz)) => eq(xz)) &
aaa((dom(x) & eq(xy)) => dom(y)) &	   		%substitution
aaa((dom(x) & eq(xy)) => dom(y)) & 		%substitution
aae(dom(z)) &
aaa((dom(x) & dom(y) & f(xy) & eq(xz)) => f(zy)) & %substitution
aaa((dom(x) & dom(y) & f(xy) & eq(yz)) => f(xz)) & %substitution
aae(dom(x) => (f(xz) & dom(z))) &              %f is total and closedon dom
aaa((dom(x) & dom(y) & f(xy) & f(xz)) => eq(yz)) & %f is a function
aaa((dom(x) & dom(y) & f(xy) & f(zy)) => eq(xz)) & %f is injective
aea(dom(z) & dom(y) & -f(zy)).



ADVANCED

When running flipper a c-program that does the actual search for
a relative consistency proof is assembled and compiled
using files in the following directory

~/.flipper/includes

The theory relative to which consistency is proven is stored in the
form of some tables in a file called "tables.h".
One may replace that file with one of the following to
try different theories.

tables_do00.h          -  dense order without endpoints
tables_finite.h	       -  full theory over 2 elemet set (flipper
                          behaves like a finite model enumerator in this case)
tables_succ_less.h     -  natural numbers with successor and less
tables_do10.h	       -  dense order with one endpoint
tables_succ.h	       -  natural numbers with successor


NOTES

There quite possibly still are bugs in flipper.
If you find some please let me know (rognes
at berlios.de). Also let me know if you get flipper
to work for something fun, usefull or otherwise interesting.

For some information on how flipper works see:
http://www.easychair.org/FLoC-06/DISPROVING-preproceedings.pdf

André Rognes
